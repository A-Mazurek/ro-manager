<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE rdf:RDF [
    <!ENTITY rdf     "http://www.w3.org/1999/02/22-rdf-syntax-ns#" >
    <!ENTITY rdfs    "http://www.w3.org/2000/01/rdf-schema#" >
    <!ENTITY owl     "http://www.w3.org/2002/07/owl#" >
    <!ENTITY xsd     "http://www.w3.org/2001/XMLSchema#" >
    <!ENTITY xml     "http://www.w3.org/XML/1998/namespace" >
    <!ENTITY rdfg    "http://www.w3.org/2004/03/trix/rdfg-1/" >
    <!ENTITY ore     "http://www.openarchives.org/ore/terms/" >
    <!ENTITY ao      "http://purl.org/ao/" >
    <!ENTITY dcterms "http://purl.org/dc/terms/" >
    <!ENTITY foaf    "http://xmlns.com/foaf/0.1/" >
    <!ENTITY ro      "http://purl.org/wf4ever/ro#" >
    <!ENTITY wfprov  "http://purl.org/wf4ever/wfprov#" >
    <!ENTITY wfdesc  "http://purl.org/wf4ever/wfdesc#" >
    <!ENTITY wf4ever "http://purl.org/wf4ever/wf4ever#" >
    <!ENTITY minim   "http://purl.org/minim/minim#" >
]>

<rdf:RDF xmlns="."
     xmlns:rdf="&rdf;"
     xmlns:rdfs="&rdfs;"
     xmlns:owl="&owl;"
     xmlns:xsd="&xsd;"
     xmlns:xml="&xml;"
     xmlns:rdfg="&rdfg;"
     xmlns:ore="&ore;"
     xmlns:ao="&ao;"
     xmlns:dcterms="&dcterms;"
     xmlns:foaf="&foaf;"
     xmlns:ro="&ro;"
     xmlns:wfprov="&wfprov;"
     xmlns:wfdesc="&wfdesc;"
     xmlns:wf4ever="&wf4ever;"
     xmlns:minim="&minim;"
>

  <!-- ===========
       CONSTRAINTS 
       ===========
    -->

  <!-- Target for Minimum information requirement 

       Minim invokes minimum information models on for a specified purpose
       relating to a specified target.  The requirement may apply to some
       resource other than the specified target.
    -->

  <rdf:Description rdf:about="http://ZZZZZZ#ChecklistConstraints">

    <minim:hasConstraint>
      <minim:Constraint rdf:about="#ZZZ1">
        <minim:forTargetTemplate>{+targetro}</minim:forTargetTemplate>
        <minim:forPurpose>ZZZ1</minim:forPurpose>
        <minim:toModel rdf:resource="#ZZZ1__model" />
        <rdfs:comment>
          Constraint to be satisfied if the target is to be ZZZ1
        </rdfs:comment>
      </minim:Constraint>
    </minim:hasConstraint>

    <minim:hasConstraint>
      <minim:Constraint rdf:about="#ZZZ2">
        <minim:forTargetTemplate>{+targetro}</minim:forTargetTemplate>
        <minim:forPurpose>ZZZ2</minim:forPurpose>
        <minim:toModel rdf:resource="#ZZZ2__model" />
        <rdfs:comment>
          Constraint to be satisfied if the target is to be ZZZ2
        </rdfs:comment>
      </minim:Constraint>
    </minim:hasConstraint>

  </rdf:Description>

  <!-- ======
       MODELS
       ======
    -->

  <!-- Model (checklist) enumerating requirements for target to be ZZZ1.
    -->
  <minim:Model rdf:about="#ZZZ1_model">
    <rdfs:label>ZZZ1</rdfs:label>
    <rdfs:comment>
      This model defines information that must be satisfied by the target RO
      for the target resource to be ZZZ1
    </rdfs:comment>
    <minim:hasMustRequirement rdf:resource="#ZZZ1-Must" />
    <minim:hasShouldRequirement rdf:resource="#ZZZ1-Should" />
    <minim:hasMayRequirement rdf:resource="#ZZZ1-May" />
  </minim:Model>

  <!-- Model (checklist) enumerating requirements for target to be ZZZ2.
    -->
  <minim:Model rdf:about="#ZZZ2_model">
    <rdfs:label>ZZZ2</rdfs:label>
    <rdfs:comment>
      This model defines information that must be satisfied by the target RO
      for the target resource to be ZZZ2
    </rdfs:comment>
    <minim:hasMustRequirement rdf:resource="#ZZZ2-Must" />
    <minim:hasShouldRequirement rdf:resource="#ZZZ2-Should" />
    <minim:hasMayRequirement rdf:resource="#ZZZ2-May" />
  </minim:Model>

  <!-- =================
       REQUIREMENT RULES
       =================
    -->

  <!-- YYY1 must be present -->
  <minim:Requirement rdf:about="#YYY1-exists">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:exists>
          <!-- YYY1-SPARQL existence query; e.g. -->
          ?wf rdf:type wfdesc:Workflow .
        </minim:exists>
        <!-- use show or showpass+showfail according to need or taste -->
        <minim:show>YYY1-exists test</minim:show>
        <minim:showpass>YYY1 found</minim:showpass>
        <minim:showfail>No YYY1 found</minim:showfail>
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
  </minim:Requirement>

  <!-- ContentMatchRequirementRule options.
       exists, aggregatesTemplate and isLiveTemplate can be combined in one rule
       (but the resulting message may make less sense that way).
    -->

  <!-- YYY2 files must be aggregated -->
  <minim:Requirement rdf:about="#YYY2-aggregated">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          <!-- Probe SPARQL query; e.g. -->
          ?wf rdf:type wfdesc:Workflow ;
              wfdesc:hasInput [ wfdesc:hasArtifact ?if ] .
        </minim:forall>
        <minim:aggregatesTemplate><!-- URI template using query-bound values; e.g. -->
          {+if}
        </minim:aggregatesTemplate>
        <!-- use show or showpass+showfail according to need or taste -->
        <minim:show>%(wf)s YYY2-aggregates test</minim:show>
        <minim:showpass>All %(wf)s YYY2-aggregates</minim:showpass>
        <minim:showfail>%(wf)s YYY2-aggregates %(if)s not aggregated</minim:showfail>
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
  </minim:Requirement>

  <!-- YYY3 files must be accessible (live) -->
  <minim:Requirement rdf:about="#YYY3-aggregated">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          <!-- Probe SPARQL query; e.g. -->
          ?wf rdf:type wfdesc:Workflow ;
              wfdesc:hasInput [ wfdesc:hasArtifact ?if ] .
        </minim:forall>
        <minim:isLiveTemplate><!-- URI template using query-bound values; e.g. -->
          {+if}
        </minim:isLiveTemplate>
        <!-- use show or showpass+showfail according to need or taste -->
        <minim:show>%(wf)s YYY3-aggregates test</minim:show>
        <minim:showpass>All %(wf)s YYY3-aggregates</minim:showpass>
        <minim:showfail>%(wf)s YYY3-aggregates %(if)s not aggregated</minim:showfail>
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
  </minim:Requirement>

  <!-- YYY4 must exist in metadata -->
  <minim:Requirement rdf:about="#YYY4-exists">
    <minim:isDerivedBy>
      <minim:ContentMatchRequirementRule>
        <minim:forall>
          <!-- Probe SPARQL query; e.g. -->
          ?wf rdf:type wfdesc:Workflow ;
              wfdesc:hasInput [ wfdesc:hasArtifact ?if ] .
        </minim:forall>
        <minim:exists>
          <!-- YYY4 existence SPARQL query; e.g. -->
          ?if rdfs:comment ?ifcomment .
        </minim:exists>
        <!-- use show or showpass+showfail according to need or taste -->
        <minim:show>%(wf)s YYY4-exists test</minim:show>
        <minim:showpass>All %(wf)s YYY4-exists aggregated</minim:showpass>
        <minim:showfail>%(wf)s YYY4-exists %(if)s not aggregated</minim:showfail>
      </minim:ContentMatchRequirementRule>
    </minim:isDerivedBy>
  </minim:Requirement>

  <!-- Environment needs YYY5-software -->
  <minim:Requirement rdf:about="#YYY5-software">
    <minim:isDerivedBy>
      <minim:SoftwareEnvironmentRule>
        <minim:command>YYY5-command</minim:command>
        <minim:response>YYY5-response-regex</minim:response>
        <minim:show>YYY5-command %(command)s returns %(response)s</minim:show>
      </minim:SoftwareEnvironmentRule>
    </minim:isDerivedBy>
  </minim:Requirement>

</rdf:RDF>
