Priorities from Kristina:

I think such a tool would form a great starting point! As a start I would be happy with the following (by order of importance):

    * ro config: configure research object management tool
    * ro create: create new research object
    * ro add: add files to a research object
    * ro ls: list contents of research object
    * ro annotate, ro annotations: annotate research object contents
    * ro users: sharing research objects

which corresponds very well with your proposal of which functions to tackle initially. The only thing I miss is the sharing part. I think that is something I would like to be able to do quite fast as well. One thing I thought about was logging. Would it be possible to create a log? That would help me backtrack what I actually do with a RO, and in which order I tend to do things.

----

TODO:

* When creating resource, try to guess or retain media type information
* Update documentation to reflect new link command
* ro show config
* ro create should fail if RO already created

* ro eval checklist
** See: http://www.wf4ever-project.org/wiki/display/docs/Integrity+and+Authenticity+component
** See: https://www.pivotaltracker.com/story/show/26123933
** Target specification is very error prone
** Error handling when target not found is poor

* Mechanism to define new SPARQL prefixes in Minim file/model

* ro users
* ro create: create manifest file via rdflib serialization
* Options to return JSON/RDF info for use by other apps?
  (done for eval checklist; annotations, list todo)
* Options for RO logging of changes, etc.
* ro list currently shows only files: want to show directories too?

* RO folder support

Other functions:
- display serialization of manifest graph (? - as well as annotations)

Bug in results model.  If the same target is evaluated using the same model in the context of two different ROs, with different results, the resulting combined graph is ambiguous.  An additional node is needed to create a 3-way satisfaction relation between RO, target, minim.  Fix, I think is to introduce a result node to replace ResearchObject, then have link from RO to the result node (or maybe the other way round).

Technical debt:
- Mop up @@TODOs
- ro-manager-test problem: https://jira.man.poznan.pl/jira/browse/WFE-1154
- web service return sensible error when RO or minim resource cannot be retrieved
- checklist display should escape tag-brackets in RO title and description
- refactor minim:showmiss handling so that item result can be more than just satisfied T/F;  allow the renderer to decide whether to show this as OK, fail or something else.  E.g. return pass/fail/miss and select message template accordingly; add "miss" to style options returned.
- remove RDF format parameter when parsing minim (cf. https://jira.man.poznan.pl/jira/browse/WFE-744)
- new test cases for evaluation
- Check out rdflib sparql query bnode bug - is it fixed?
  (It was fixed, but a similar problem with query parameter ordering has been found.)
  (Workaround: don't use SELECT *, but name variables explicitly.)
- See also SC47 page - http://www.wf4ever-project.org/wiki/pages/viewpage.action?pageId=3506198
- See also decay detection with checklist ???
- replace sparql prefixes in TrafficLightReports.py
- format guessing: see http://rdflib.readthedocs.org/en/latest/apidocs/rdflib.html#rdflib.util.guess_format
- Minim liveness follows redirection?
- Fix bug in checklist evaluation service with wrong content negotiated type - wrong response if content negotiate for bad type
- Namespace test in checklist eval (cf. qSKOS) - can do with SPARQL 1.1?


----

WONTDO

Technical debt:
- add minim:query_select to minim model & ontology & diagram


DONE

Technical debt:
- test with latest rdflib, update dependencies
- try new rdflib SPARQL processor as drop-in for rdfextras 
- role of onresource / onresourcetemplate in constraint is unclear (to me!)
-- eliminate these from model as they seem to serve no purpose.
-- Start by removing code in minim.py, then chase through test case failures.
-- Finally, remove from all minim model files.
- refactor minim so that checklist ordering is defined by model, not rules
-- (sort-of done: Minim creator uses bklank node for Requirements, and labels the rules.)
- Update home page of web service; esp links; also link to API description in wf4ever wiki


* ro eval checklist
** Test that aggregated files actually exist - part of liveness?

/ display serialization of annotation graph

* Refactor sync code to use ro_metadata/ROSRS_Session to access manifest?

* ro config: configure research object management tool
* ro create: create new research object
* ro status: display status of RO
* ro list / ro ls: list contents of research object
* ro annotate, ro annotations: annotate research object contents

* ro add [file]
* ro add [-a] [directory]
* ro eval completeness minim

* Refactor ro_manifest+ro_annotation to be a class creating a manifest object.  Revise code accordingly; don't depend on rodir from calling code.
** Define class ro_metadata that reads manifest and encapsulates both the graph and the base URI (done)
** Define relativization method that works with the new class (done)
** Modify ro_command functions to use new class for annotations, not ro_annotation module directly (done)
** Check that modified ro_command works with new RO (done)
** Create ro_metadata methods to replace direct references to ro_manifest functions (addAggregatedResources) (done)
** Remove direct references to ro_manifest in ro_command; use ro_metadata methods, in:
*** ro_command (done)
*** ro_eval_completeness (done)
*** BackgroundSync (recshceduled)
*** TestEvalCompleteness (done)
*** ro_metadata (done)
*** TestROMetadata (done)

* Refactor namespace definitions into separate module (from ro_manifest) (DONE)

* ro annotate (-g|--graph) rdf-resource [ file ] -- use RDF file already present as annotation for the named file.  Defaults to annotations for the entire RO.

* Updates evaluation options; forall => exists and liveness tests

* ro annotate/annnotations
** Test use of CURIE as type
** Test use of URI as type
** Check use of remove annotation does not modify file in main RO added with -g

* ro link
* ro links
** Test links shown in RO listing

* Refactor ro_metadata to handle manifest access and updates locally, rather than via ro_annotations.
  Also, add logic to cache ro_annotation graph.
  (Keep ro_annotations for annotation support methods)

* option to change ro manifest aggregation details - ro modify?  ro remove command added.

- read RO from web server


----

Option table

("-a", "--all",                 help="All, list all files, depends on the context")
("-b", "--ro-base",             help="Base of local directory tree used for ROs")
  -c
("-d", "--ro-directory", "--ro-uri", help="Directory or URI of Research Object to process (defaults to current directory)")
("-e", "--user-email",          help="Email address of research objects owner")
("-f", "--force",               help="Force, depends on the context")
("-g", "--graph",               help="Name of existing RDF graph used for annotation")
  -h    --help
("-i", "--ro-identifier",       help="Identifier of Research Object (defaults to value based on name)")
  -j
  -k
  -l,  "--report-level",        help="Reporting level of detail to generate (summary, must, should, may or full)"
  -m
("-n", "--user-name",           help="Full name of research objects owner")
("-o", "--output",              help="Output format to generate: text, rdfxml, turtle")
("-p", "--rosrs-password",      help="ROSRS password")
  -q
("-r", "--rosrs-uri",           help="URI of ROSRS service")
("-s", "--secret", "--hidden",  help="display hidden files in listing")
  -t
("-u", "--rosrs-username",      help="ROSRS username")
("-v", "--verbose",             help="display verbose output")
("-w", "--wildcard", "--regexp", help="Interpret annotation target as wildcard/regexp for pattern matching")
  -x
  -y
  -z
(      "--debug",               help="Display debug/trace output")

